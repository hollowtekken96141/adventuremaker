@startuml

skinparam class {
  Shape rectangle
}

class Scene {
  +id: int
  +name: string
  +gif: string
  +areas: Area[]
  +addArea(area: Area): void
  +removeArea(area: Area): void
}

class Area {
  +id: int
  +scene_id: int
  +top: string
  +left: string
  +width: string
  +height: string
  +target: string
  +new_tab: boolean
  +transition_gif: string
  +transition_duration: int
  +target_type: string
}

class SceneEditor {
  +scenes: Scene[]
  +currentScene: Scene
  +initializeScenes(): void
  +addScene(name: string): void
  +deleteScene(scene: Scene): void
  +renameScene(scene: Scene, newName: string): void
  +uploadGif(scene: Scene, gif: string): void
  +displayScene(scene: Scene): void
  +selectScene(name: string): void
}

class AreaEditor {
  +initializeAreas(scene: Scene): void
  +saveSceneAreas(scene: Scene): void
  +addClickableArea(scene: Scene): void
  +loadAreasForScene(scene: Scene): void
  +editArea(area: Area): void
}

class Utils {
  +updateSceneSelector(): void
  +updateTargetStateOptions(): void
  +selectScene(name: string): void
  +clearClickableAreas(): void
  +toggleTargetInput(): void
  +createClickableArea(areaData: object): Area
  +initDrag(event: Event): void
  +initResize(event: Event): void
  +clearStorage(): void
}

class EventListeners {
  +initializeEventListeners(): void
}

class Exporter {
  +exportGame(title: string, backgroundData: string): void
  +fetchScenesData(): object
  +generateHtmlContent(scenesData: object, title: string, backgroundData: string): string
}

SceneEditor --* Scene
Scene --* Area
SceneEditor --|> AreaEditor
SceneEditor --|> Utils
SceneEditor --|> EventListeners
SceneEditor --|> Exporter
AreaEditor --* Area

@enduml
